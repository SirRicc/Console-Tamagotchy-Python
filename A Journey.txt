
#Problems And Solutions



A couple minuntes ago I completed my basic game which works like this:
-Give your Dog a name
-He gets older
-Nobody can feed him yet
-He gets older
-He dies from starvation



I need an interface to feed him! My first idea was to add an interact function onto the end my gameloop.
This interact function should take an input, check it against some preset values, may execute 
some code (while not pausing my gameloop) and continue. But as you might guess, - it paused.



Research:
{
	"problem": "breaking game loop",
	"website": "Google",
	"search term": "python dont wait for inpout in while loop",
	"source": {
		"first": "https://stackoverflow.com/questions/20576960/python-infinite-while-loop-break-on-user-input",
		"second": "https://stackoverflow.com/questions/19846332/python-threading-inside-a-class"
	},
	"hint": {
		"topic": "threading",
		"code": "threading.Thread(target=self._func_to_be_threaded).start()"
	},
	"newToMe": "absolute"
}



Threading turned out to be an overall usefull mechanic, but the most usefull part for me is that I can listen to 
an input while still execute the game loop.
Let's outsource my interact function to a new .py file called event_listener and run both of them simultaniously.
Afterwards they should be able to communicate.



After experimenting alot with threads while gaining even more knowledge how to not deal with them, I made a partial victory!
But first things first.
Dealing with global variables is akward when you learned JS first and I hope there is a better solution to this 
instead of using them to get things working.
BUT (!) my prototype is runing without breaking the main loop/thread. C:
It's still a little buggy because we have a 50/50 chanche to process my input given by my while loop which is not an own thread.
I guess I need to .lock & release .release() my data while mutate them to work in a 100% way but I can't wait to implement it!



Threads aren't necessary, a gameloop well executed works more than fine.
Without goin' deeper into Threads let's rush into my input problem:
First, what I did.
while self.running == True:
    if raw_input() == "quit":
	quit()
	sys.exit()
    elif raw_input() == "feed":
	self.feed()
    elif raw_input() == "stats":
	self.stats()
    else:
	print("no valid input")
		
Second, what actually worked out.		
while self.running == True:
    input = raw_input()
    if input == "quit":
	quit()
	sys.exit()
    elif input == "feed":
	self.feed()
    elif input == "stats":
	self.stats()
    else:
	print("no valid input")

It couldn't check my input against all values because it testes ony a single one before it asks again on the next statement.
But if I decalare my input in the beginning of my loop, the loop can test it against all cases.
Thanks to github.com/potzpf , he really helped me out on this one.

Now it's time to make this game more ... alive.
Better prepare for a print() raid!



For now we have more Text in there to make it look nicer, a help function, the ability to feed him aslike an 
option to quit the game.
What I need now is a mechanism to decrease different values over time.
Living in a world without gettin' hungry may look like a nice place to be but in a game with a feed mechanic, things can be very
boring very soon.








